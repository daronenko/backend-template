services:
  service:
    image: ${SERVICE_NAME}:latest
    container_name: ${SERVICE_NAME}
    platform: linux/amd64
    env_file: .env
    build:
      dockerfile: deploy/dev/Dockerfile
      context: ../..
      args:
        VERSION: ${VERSION}
        REVISION: ${REVISION}
    ports:
      - ${SERVICE_PORT}:${SERVICE_PORT}
    restart: on-failure:3
    volumes:
      - ./config/config.yaml:/etc/service/config.yaml
      - ./logs:/var/log
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - postgres

  postgres:
    image: ${SERVICE_NAME}-postgres:latest
    container_name: ${SERVICE_NAME}-postgres
    build:
      dockerfile: postgres/Dockerfile
      context: .
    platform: linux/amd64
    env_file: .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - ${POSTGRES_PORT}:5432
    restart: on-failure:3
    volumes:
      - ./postgres/.pgdata:/var/lib/postgresql/data
      - ./postgres/config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgres/init:/docker-entrypoint-initdb.d
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'",
        ]
      interval: 2s
      timeout: 3s
      retries: 3
    networks:
      - postgres

networks:
    postgres:
        driver: bridge
