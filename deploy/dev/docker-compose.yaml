services:
  service:
    image: ${APP_NAME}:latest
    container_name: ${APP_NAME}
    env_file: .env
    build:
      dockerfile: deploy/dev/Dockerfile
      context: ../..
      args:
        VERSION: ${VERSION}
        GIT_REVISION: ${GIT_REVISION}
    ports:
      - ${APP_PORT}:${APP_PORT}
    restart: on-failure:3
    volumes:
      - ./config/config.yaml:/etc/app/config.yaml
      - ./logs:/var/log
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles: ["default"]
    networks:
      - postgres
      - redis
  
  hotreload:
    image: ${APP_NAME}-hotreload:latest
    container_name: ${APP_NAME}-hotreload
    env_file: .env
    build:
      dockerfile: deploy/dev/Dockerfile.HotReload
      context: ../..
      args:
        VERSION: ${VERSION}
        GIT_REVISION: ${GIT_REVISION}
    ports:
      - ${APP_PORT}:${APP_PORT}
      - 40000:40000
    restart: on-failure:3
    volumes:
      - ../..:/app
      - ./config/config.yaml:/etc/app/config.yaml
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles: ["hotreload"]
    networks:
      - postgres
      - redis
  
  debug:
    image: ${APP_NAME}-debug:latest
    container_name: ${APP_NAME}-debug
    env_file: .env
    build:
      dockerfile: deploy/dev/Dockerfile.Debug
      context: ../..
      args:
        VERSION: ${VERSION}
        GIT_REVISION: ${GIT_REVISION}
    ports:
      - ${APP_PORT}:${APP_PORT}
      - 40000:40000
    restart: on-failure:3
    volumes:
      - ./config/config.yaml:/etc/app/config.yaml
      - ./logs:/var/log
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles: ["debug"]
    networks:
      - postgres
      - redis

  postgres:
    image: ${APP_NAME}-postgres:latest
    container_name: ${APP_NAME}-postgres
    build:
      dockerfile: postgres/Dockerfile
      context: .
    env_file: .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - ${POSTGRES_PORT}:5432
    restart: on-failure:3
    volumes:
      - ./postgres/.pgdata:/var/lib/postgresql/data
      - ./postgres/config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgres/init:/docker-entrypoint-initdb.d
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DATABASE}'",
        ]
      interval: 2s
      timeout: 3s
      retries: 3
    networks:
      - postgres
  
  redis:
    image: redis:7.4-alpine
    container_name: ${APP_NAME}-redis
    restart: on-failure:3
    ports:
      - 6379:6379
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    volumes: 
      - ./redis/.rdata:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "--raw", "incr", "ping" ]
      interval: 3s
      timeout: 3s
      retries: 3
    networks:
      - redis
      - postgres

networks:
    postgres:
      driver: bridge
    redis:
      driver: bridge
